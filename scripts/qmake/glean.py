#! /usr/bin/env python3
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import argparse
import os.path
import yaml
import subprocess

def build():
  print("Parsing the metrics.yaml file...")
  metrics_file = os.path.join("glean", "metrics.yaml")
  if not os.path.isfile(metrics_file):
    print("Unable to find glean/metrics.yaml")
    exit(1)

  yaml_file = open(metrics_file, "r")
  yaml_content = yaml.safe_load(yaml_file)

  print("Generating the C++ header...")
  glean_sample_file = os.path.join("glean", "telemetry", "gleansample.h")
  output = open(glean_sample_file, "w")
  output.write("""/* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

  // AUTOGENERATED! DO NOT EDIT!!

  namespace GleanSample {

  """)
  def camelize(string):
      output = ""
      first = True
      for chunk in string.split("_"):
          if first:
            output += chunk
            first = False
          else:
            output += chunk[0].upper()
            output += chunk[1:]
      return output

  for key in yaml_content["sample"]:
     sampleName = camelize(key)
     output.write(f"constexpr const char* {sampleName} = \"{sampleName}\";\n")

  output.write("""
  } // GleanSample
  """);
  output.close();


  print("Generating the Kotlin enum...")
  output = open(os.path.join("android", "src", "org", "mozilla", "firefox", "vpn", "glean", "GleanEvents.kt"), "w")
  output.write("""/* This Source Code Form is subject to the terms of the Mozilla Public
   * License, v. 2.0. If a copy of the MPL was not distributed with this
   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

  // AUTOGENERATED! DO NOT EDIT!!
  package org.mozilla.firefox.vpn.glean

  import android.annotation.SuppressLint

  @SuppressLint("Unused")
  enum class GleanEvent(val key: String) {
  """)
  def camelize(string):
      output = ""
      first = True
      for chunk in string.split("_"):
          if first:
            output += chunk
            first = False
          else:
            output += chunk[0].upper()
            output += chunk[1:]
      return output

  for key in yaml_content["sample"]:
     sampleName = camelize(key)
     output.write(f"\t {sampleName}(\"{sampleName}\"),\n")

  output.write("""
  } // GleanSample
  """);
  output.close();

  print("Generating the JS modules...")
  try:
    subprocess.call(["glean_parser", "translate",
                     os.path.join("glean", "metrics.yaml"),
                     os.path.join("glean", "pings.yaml"),
                     "-f", "javascript",
                     "-o", os.path.join("glean", "telemetry"),
                     "--option", "platform=qt",
                     "--option", "version=0.30"])
  except:
    print("glean_parser failed. Is it installed? Try with:\n\tpip3 install -r requirements.txt --user");
    exit(1)

def clean():
  telemetry_path = os.path.join("glean", "telemetry")
  if not os.path.isdir(telemetry_path):
    print("Unable to find path %s" % telemetry_path)
    exit(1)

  for file in os.listdir(telemetry_path):
    if (file.startswith('.')): continue
    file = os.path.join(telemetry_path, file)
    os.remove(file)

  android_event_path = os.path.join("android", "src", "org", "mozilla", "firefox", "vpn", "glean", "GleanEvents.kt")
  if os.path.isfile(android_event_path):
    os.remove(android_event_path)


parser = argparse.ArgumentParser(description="Generate the glean js/c++ files from the samples")
parser.add_argument("operation", metavar="operation", type=str, nargs=1,
                    help="the operation to execute (build, clean)")

args = parser.parse_args()
args = args.operation[0]

workdir = os.path.join(os.path.dirname(__file__), "..", "..")
os.chdir(workdir)

if args == "build":
  build()

elif args == "clean":
  clean()

else:
  parser.print_help()
