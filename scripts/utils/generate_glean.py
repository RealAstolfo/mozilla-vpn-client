#! /usr/bin/env python3
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

import sys
import os.path
import yaml
import subprocess

## Find the input Yaml files relative to the script location.
rootpath = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir, os.pardir))
outpath = os.path.join(os.getcwd(), 'glean', 'telemetry')
metrics = os.path.join(rootpath, 'glean', 'metrics.yaml')
pings = os.path.join(rootpath, 'glean', 'pings.yaml')

print("Parsing the metrics.yaml file...")
if not os.path.isfile(metrics):
  print(f'Unable to find {metrics}')
  exit(1)

yaml_file = open(metrics, 'r', encoding='utf-8')
yaml_content = yaml.safe_load(yaml_file)

print("Generating the C++ header...")
output = open(os.path.join(outpath, "gleansample.h"), "w")
output.write("""/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// AUTOGENERATED! DO NOT EDIT!!

namespace GleanSample {

""")
def camelize(string):
    output = ''
    first = True
    for chunk in string.split('_'):
        if first:
          output += chunk
          first = False
        else:
          output += chunk[0].upper()
          output += chunk[1:]
    return output

for key in yaml_content['sample']:
   sampleName = camelize(key)
   output.write(f"constexpr const char* {sampleName} = \"{sampleName}\";\n")

output.write("""
} // GleanSample
""");
output.close();


print("Generating the Kotlin enum...")
## FIXME: This gets the build moving, but probably breaks on Android
##output = open("android/src/org/mozilla/firefox/vpn/glean/GleanEvents.kt", "w")
output = open(os.path.join(outpath, "GleanEvents.kt"), "w")
output.write("""/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

// AUTOGENERATED! DO NOT EDIT!!
package org.mozilla.firefox.vpn.glean

import android.annotation.SuppressLint

@SuppressLint("Unused")
enum class GleanEvent(val key: String) {
""")
def camelize(string):
    output = ''
    first = True
    for chunk in string.split('_'):
        if first:
          output += chunk
          first = False
        else:
          output += chunk[0].upper()
          output += chunk[1:]
    return output

for key in yaml_content['sample']:
   sampleName = camelize(key)
   output.write(f"\t {sampleName}(\"{sampleName}\"),\n")

output.write("""
} // GleanSample
""")
output.close()


print("Generating the QRC file...")
output = open(os.path.join(outpath, "telemetry.qrc"), "w")
output.write("""<!-- AUTOGENERATED! DO NOT EDIT -->
<RCC>
    <qresource prefix="/glean/telemetry">
        <file>pings.js</file>
        <file>sample.js</file>
        <file>qmldir</file>
    </qresource>
</RCC>
""")
output.close()


print("Generating the JS modules...")
try:
  subprocess.call([sys.executable, "-m", "glean_parser", "translate", metrics, pings,
                   "-f", "javascript", "-o", outpath, "--option", "platform=qt",
                   "--option", "version=0.30"])
except Exception as e:
  print("glean_parser failed. Is it installed? Try with:\n\tpip3 install -r requirements.txt --user")
  print(e)
  exit(1)

